pipeline {
  
    agent any
    tools{
     nodejs 'NODEJS'
     
  
    }
    environment{
    CONFIG_FILE_PATH="${WORKSPACE}/config/local.json"
    }
    stages {
        stage('Which environment to build?') {
            steps {
                script {
                    def userInput = input(id: 'userInput', message: 'Deploy to?',
                    parameters: [[$class: 'ChoiceParameterDefinition', defaultValue: 'Development', 
                        description:'Environment choices', name:'denv', choices: "Development\nProduction\nTesting"]
                    ])
                    user_env_input = userInput
                    //Use this value to branch to different logic if needed
                }
            }
        }
        stage('Confirm') {
            steps {
                input("Do you want to proceed building in ${user_env_input} environment?")
            }
        }       
        stage('Docker Build') {
            steps {
                echo 'Building..'
                
            }
        }
         stage('Confirm for unit tests') {
            steps {
                 
               script{
                   def is_unit_test_continue_parameter = input(id: 'is_unit_test_continue', message: 'Do you want to go for unit tests and jacoco reports?',
                    parameters: [[$class: 'ChoiceParameterDefinition', defaultValue: 'No',
                        description:'Unit Test choices', name:'unit tests  report', choices: 'Yes\nNo']
                    ])
                    
                   
                    is_unit_test_continue=is_unit_test_continue_parameter


                  

               }}}
        stage('Unit Tests') {
            when {
         expression { is_unit_test_continue == "Yes" }
        }
     steps {
         echo "Hello,unit_test continue...!"
            script {
                  
                echo "Current workspace is ${env.WORKSPACE}" 
                sh 'npm i jest superset'
                sh 'export CONFIG_FILE_PATH=${CONFIG_FILE_PATH}'
                def reportPath = "${WORKSPACE}/target/report"
                sh 'echo ${reportPath}'
                sh 'npx jest --coverage --forceExit'
                echo 'testing in progress...'
                jsunit testResults: '**/test-results/test/*.xml', skipPublishingChecks: true
                
            }
        }
        }

    

         stage('Confirm for Sonarqube Check') {
            steps {
                 
               script{
                   def is_sonarqube_parameter = input(id: 'is_sonarqube', message: 'Do you want to continue with Sonarqube?',
                    parameters: [[$class: 'ChoiceParameterDefinition', defaultValue: 'No',
                        description:'Sonarqube choices', name:'sonarqube_choice_params', choices: 'Yes\nNo']
                    ])
                    
                   
                   is_sonarqube=is_sonarqube_parameter


                  

               }}}


                stage('Sonarqube Integeration') {
            when {
         expression { is_sonarqube == "Yes" }
     }
     steps {
         echo "Hello,sonarqube continue...!"
            script {
               scannerHome = tool 'SonarQube Scanner 4.7.0.2747'
    withSonarQubeEnv(installationName:'sonarqube-server', credentialsId: 'souradip_sonar_token') {
                     sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=qwerty -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=sqp_e605b3ce09f7c600e45623c2fea55399011c9a3e -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info"
 
                   
                    
                }

   timeout(time: 1, unit: 'MINUTES') {  
     def qg = waitForQualityGate() 
     if (qg.status != 'OK') {
       error "Pipeline aborted due to quality gate failure: ${qg.status}"
     }
     }
                  
                
                        
                        
                    
            }
          
        }
                 
                  

 
  

           
                }
     
        
        
    }
}
